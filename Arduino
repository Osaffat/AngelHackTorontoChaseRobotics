//Chase Robotics Angel Hack 2018 
// 6/23/2018

#include <Wire.h>
#include <L3G.h>

//Initializing ecoder 
#define outputA 5
 #define outputB 4
 L3G gyro;
 int counter = 0; 
 int aState;
 int aLastState;  
 double distance ;

int data ;
int c;


//motor pwm pin
int motor1 = 10;
int motor2 = 11;
String inString ;

void setup() {
 pinMode (motor1, OUTPUT);
 pinMode (motor2, OUTPUT);
  pinMode (outputA,INPUT);
   pinMode (outputB,INPUT);
pinMode(LED_BUILTIN,OUTPUT);
   Serial.begin (9600);
   Wire.begin();
   if (!gyro.init())
   {
    Serial.println("Failed to autodetect gyro type!");
   }
   gyro.enableDefault();
   // Reads the initial state of the outputA
   aLastState = digitalRead(outputA); 

}

int getCommandType(int c)
{
  return c / 1000;
}

int getDistanceFromCommand(int c)
{
  return c % 1000;
}

int getAngleFromCommand(int c)
{
  return c % 2000;
}

void driveUntil(int distance)
{
  counter = 0;
  int encState = 0;
  int lastState = 0;
  int distanceDriven = 0; 
  while(distanceDriven < distance)
  {
    analogWrite (motor1, 208 ); // right motor forward
    analogWrite (motor2, 171); // left motor forwarad
    lastState = encState;
    encState = digitalRead(outputA);
    if(encState != lastState)
    {
      counter++;
    }
    Serial.println(distanceDriven);
    distanceDriven = (23.87*counter)/14;
    delay(20);  
  }
  analogWrite (motor1, 190 );
  analogWrite (motor2, 190);
    
    
}

void turnRight()
{
  delay(1000);
      analogWrite(motor1, 168);
    analogWrite(motor2, 158);

  delay (1000);
  analogWrite(motor1, 190);
    analogWrite(motor2, 190);
}

void turnLeft()
{
  delay(1000);
    analogWrite(motor1, 194);
    analogWrite(motor2, 202);

  delay (1000);
    analogWrite(motor1, 190);
    analogWrite(motor2, 190);

  
}

void turnUntil(int angle)
{
  /*Serial.println("starting turn");
  int angleTurned = 0;
  int counter = 0;
  int totalRate = 0;
  int averageRate = 0;
  while(counter < 50)
  {
    Serial.println("continuing turn");
    gyro.read();
    int rate = (int)(gyro.g.z) / 10;
    totalRate += rate;
    counter++;
    delay(100);
  }
  Serial.println(angle);*/
}
void loop() {


 if (Serial.available () >= 1){
    data = Serial.parseInt();
    Serial.println(data);
    int commandType = getCommandType(data);
    if(commandType == 1)
    {
      int distance = getDistanceFromCommand(data);
      driveUntil(distance);
      Serial.println("Drive completed.");
    }
    else if(commandType == 2)
    {
      int value = getAngleFromCommand(data);
      if(value == 1)
      {
        turnLeft();
        Serial.println("Left turn completed.");
      }
      else if(value == 2)
      {
        turnRight();
        Serial.println("Right turn completed.");
      }
    }
 }
    
    
  
  
  
// encoder stuff 
   
/*    aState = digitalRead(outputA); 
   
   if (aState != aLastState){     
     
     if (digitalRead(outputB) != aState) { 
       counter ++;
     } else {
       counter --;
     }
     distance = (23.87*counter)/14 ; 
     Serial.print("Position: ");
     Serial.println(counter);
     Serial.println(distance);
   } 
   aLastState = aState; // Updates the previous state of the outputA with the current state
    
    if ( counter > data) { 
  digitalWrite(LED_BUILTIN, HIGH);
  //make robot go forward
    analogWrite (motor1, 198 ); // right motor forward
    analogWrite (motor2, 171); // left motor forwarad
    
    }
    delay (20);*/


/*

 delay(2000);
     analogWrite(motor1,190);
     analogWrite(motor2,190);
      
  delay(2000);
     //makes robot go backwards
     analogWrite (motor1, 182);
     analogWrite (motor2, 202);

   delay(2000);
     analogWrite(motor1,190);
     analogWrite(motor2,190);

  delay (2000);
  //make robot turn right
    analogWrite(motor1, 168);
    analogWrite(motor2, 158);

  delay (1000);
     analogWrite(motor1,190);
     analogWrite(motor2,190);
  delay (1000);
   //make robot turn left 
    analogWrite(motor1, 194);
    analogWrite(motor2, 202);

  delay (1000);
     analogWrite(motor1,190);
     analogWrite(motor2,190);
  

   */

 

  }
